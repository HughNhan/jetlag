---
# sno-create-ai-cluster tasks

- name: Create SNO cluster
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters"
    method: POST
    body_format: json
    status_code: [201]
    return_content: true
    body: {
        "name": "{{ hostvars[item].inventory_hostname }}",
        "openshift_version": "{{ openshift_version }}",
        "high_availability_mode": "None",
        "base_dns_domain": "{{ base_dns_name }}",
        "cluster_network_cidr": "{{ cluster_network_cidr }}",
        "cluster_network_host_prefix": 23,
        "service_network_cidr": "{{ service_network_cidr }}",
        "pull_secret": "{{ pull_secret | to_json }}",
        "ssh_public_key": "{{ lookup('file', ssh_public_key_file) }}",
        "additional_ntp_source": "{{ ntp_server }}"
    }
  loop: "{{ groups['sno'] }}"
  register: create_cluster_return

- name: Populate cluster ids
  when: cluster_type == "sno"
  set_fact:
    ai_cluster_ids: "{{ ai_cluster_ids|default({}) | combine( {item.item: {'cluster_name': item.item, 'cluster_id': item.json.id} } ) }}"
  loop: "{{ create_cluster_return.results }}"

- name: Add entries in /etc/hosts
  blockinfile:
    path: "/etc/hosts"
    backup: true
    block: |
      {{ hostvars[item].ip_address }} api.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} oauth-openshift.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} console-openshift-console.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} downloads-openshift-console.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} alertmanager-main-openshift-monitoring.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} grafana-openshift-monitoring.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} prometheus-k8s-openshift-monitoring.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
      {{ hostvars[item].ip_address }} thanos-querier-openshift-monitoring.apps.{{ hostvars[item].inventory_hostname }}.{{ base_dns_name }}
    insertafter: "EOF"
    marker: "# {mark} {{ hostvars[item].inventory_hostname }} OCP CLUSTER MANAGED BLOCK"
  loop: "{{ groups['sno'] }}"

- name: Get OpenShift versions to obtain coredns image
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/openshift_versions"
    method: GET
    status_code: [200, 201]
    return_content: true
  register: versions

- name: Obtain coredns image for this specific OpenShift version
  shell: |
    oc adm release info {{ versions.json[openshift_version]['release_image'] }} --image-for=coredns
  register: coredns_version_output
  when: '"registry.ci.openshift.org" not in versions.json[openshift_version]["release_image"]'

- name: Set coredns image for released version
  set_fact:
    coredns_image: "{{ coredns_version_output.stdout }}"
  when: '"registry.ci.openshift.org" not in versions.json[openshift_version]["release_image"]'

- name: Set coredns image (registry.ci.openshift.org)
  set_fact:
    coredns_image: "quay.io/openshift/origin-coredns:{{ openshift_version }}"
  when: '"registry.ci.openshift.org" in versions.json[openshift_version]["release_image"]'

- name: Add SNO lab dns workaround manifest
  uri:
    url: "http://{{ assisted_installer_host }}:{{ assisted_installer_port }}/api/assisted-install/v1/clusters/{{ item.value.cluster_id }}/manifests"
    method: POST
    body_format: json
    status_code: [201]
    body: {
        "folder": "manifests",
        "file_name": "50-controlplane-dns.yml",
        "content": "{{ lookup('template', './50-controlplane-dns.yml.j2') | b64encode }}"
    }
  loop: "{{ ai_cluster_ids | dict2items  }}"
